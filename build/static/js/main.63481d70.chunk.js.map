{"version":3,"sources":["images/logo.png","images/profile.png","components/Navbar.js","components/Footer.js","components/Layouts.js","pages/About.js","components/LatestTable.js","components/Stats.js","pages/Home.js","components/MapChart.js","pages/Maps.js","components/Graph.js","components/CountryCard.js","api/service.js","components/CountryStats.js","pages/Country.js","pages/Forecast.js","pages/Compare.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","memo","Navbar","className","variant","expand","sticky","Container","src","logo","alt","width","height","to","id","Toggle","aria-controls","Collapse","Nav","target","rel","href","icon","faGithub","children","useEffect","window","scrollTo","Layouts","class","values","u","chunks","faLinkedinIn","faEnvelope","useState","covidData","setCovidData","isLoading","setLoading","a","axios","result","data","fetchData","numberFormatter","cell","undefined","toLocaleString","columns","dataField","text","sort","style","fontWeight","formatter","language","navigator","split","iso2","filter","item","country","map","post","countryInfo","pathname","countryNames","row","rowIndex","colIndex","backgroundColor","color","striped","hover","condensed","bootstrap4","keyField","defaultSorted","order","rowStyle","justifyContent","alignItems","verticalAlign","statsData","setStatsData","loading","fetch","res","json","getData","val","number","parseInt","calculateRate","num","totalNum","rate","minimumFractionDigits","maximumFractionDigits","Spinner","animation","cases","todayCases","recovered","deaths","todayDeaths","critical","tests","Alert","size","parseFloat","date","Date","toLocaleDateString","toLocaleTimeString","customToDate","updated","Home","Component","colorScale","scaleLinear","domain","range","setTooltipContent","coordinates","zoom","position","setPosition","Axios","Row","Col","onClick","pos","xmlns","viewBox","stroke","strokeWidth","x1","y1","x2","y2","data-tip","projectionConfig","scale","center","onMoveEnd","length","geography","geographies","geo","d","find","s","iso3","properties","ISO_A3","key","rsmKey","fill","onMouseEnter","NAME","onMouseLeave","outline","pressed","content","setContent","place","Graph","Array","isArray","this","props","weekData","margin","top","right","left","bottom","strokeDasharray","dataKey","XAxisDatakey","name","type","AreaDataKey","PureComponent","LineGraph","Key1","Name1","Key2","Name2","Key3","Name3","Key4","Name4","CompareLineGraph","dot","CustomizedDot","cx","cy","r","React","selectedCountry","setCountry","selectedCountryNames","countryNamesEN","intl","useIntl","Form","FormGroup","FormLabel","FormControl","as","placeholder","onChange","event","handler","value","hidden","formatMessage","Object","keys","b","localeCompare","index","getTurkeyData","turkeyData","tasks","turkishMotnhFormatter","Confirmed","Number","totalCases","Recovered","totalRecovered","Deaths","totalDeaths","dailyConfirmed","test","testCaseRate","caseDeathRate","totalIntubated","totalIntensiveCare","getTurkeyStatsData","yesterDayCritical","arr","todayRecovered","todayTests","todayCritical","totalTests","getWorldData","usResult","usResultData","usRecoveryArr","timeline","worldData","moment","format","recoveryRate","getCompareData","country1","country2","compareData","getHistoricalData","historyData","activeGraphArray","deathGraphArray","recoveredGraphArray","activeArray","recoveryArray","deathArray","forEach","push","graphArray1","graphArray2","entries","Math","round","month","monthname","num1","num2","graphData","setGraphData","statsCountry","setStatsCountry","countryData","match","params","updatedCountry","Button","disabled","role","aria-hidden","defaultMessage","ul","msg","li","firstCountry","setFirstCountry","secondCountry","setSecondCountry","setData","activeData","setActiveData","deathData","setDeathData","recoveryData","setRecoveryData","cmpData","getGraphData","array","history","toString","Table","bordered","flag","active","testsPerOneMillion","Card","Header","Body","WhatsappShareButton","url","location","WhatsappIcon","FacebookShareButton","FacebookIcon","TwitterShareButton","TwitterIcon","LinkedinShareButton","LinkedinIcon","exact","path","component","Maps","Country","About","Forecast","Compare","Boolean","hostname","navLang","ReactDOM","render","StrictMode","locale","messages","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63481d70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.62c8c67e.png\";","module.exports = __webpack_public_path__ + \"static/media/profile.1f48aa76.png\";","import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\nimport { FormattedMessage } from 'react-intl';\nimport logo from '../images/logo.png';\n\nconst Navigationbar = () => {\n  return (\n    <Navbar className=\"navbar-expand-xl py-1\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n      <Container>\n      <img src={logo} alt='logo' width=\"45px\" height=\"45x\"/>\n        <Link to=\"/\" className=\"navbar-brand\">\n        <span>&nbsp;</span>Covidtest.com <small className=\"text-muted\"> / <FormattedMessage id=\"nav_text\"></FormattedMessage></small>\n        </Link>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Link to=\"/\" className=\"nav-link mx-2\">\n              <FormattedMessage id=\"home_page\" /> \n            </Link> \n            <Link to=\"/maps\" className=\"nav-link mx-2\">\n              <FormattedMessage id=\"map\" />\n            </Link>\n            <Link to='/country/TR' className=\"nav-link mx-2\">\n              <FormattedMessage id=\"country-detail\" />\n            </Link>\n            <Link to=\"/compare/TR_IT\" className=\"nav-link mx-2\">\n               <FormattedMessage id=\"compare\" />\n            </Link>\n            <Link to=\"/forecast\" className=\"nav-link mx-2\">\n               <FormattedMessage id=\"forecast\" />\n            </Link>\n            <Link to=\"/about\" className=\"nav-link mx-2\">\n              <FormattedMessage id=\"about\" />\n            </Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default memo(Navigationbar);\n","import React, { memo } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { FormattedMessage } from \"react-intl\";\n\n\n\nconst Footer = () => {\n  return (\n    <footer className=\"py-4\">\n      <p className=\"mb-0 text-center\">\n      <FormattedMessage id=\"developed\" /> {\" \"}\n         <a target=\"_blank\" rel=\"noopener noreferrer\">Ritesh Suryavanshi</a> <span>&nbsp; </span>\n        {\"   \"} | <span>&nbsp;</span> <a href=\"https://github.com/rksury/ReactWeb-Covid.git\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faGithub}/></a>\n          <span>&nbsp; All rights reserved ® 2020</span>\n      </p>\n    </footer>\n  );\n};\n\nexport default memo(Footer);\n","import React, { useEffect, memo } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\n\nconst Layout = ({ children }) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <main className=\"container my-3 min-vh-100\">{children}</main>\n      <Footer />\n    </>\n  );\n};\n\nexport default memo(Layout);","import React, { memo} from 'react';\nimport Layouts from '../components/Layouts';\nimport pp from '../images/profile.png';\nimport { faLinkedinIn, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { FormattedMessage } from \"react-intl\";\n\n\n\n\nconst About = () => {\n    return (\n      <Layouts>\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">Covidst<small class=\"text-muted\">.com</small></h1>\n          <p className=\"lead\"><FormattedMessage  id=\"about_message\" \n             values={{u: (...chunks) => (\n                        <u>\n                          {chunks}\n                        </u>)}}\n                  >\n          </FormattedMessage></p>\n\n          <br></br>\n          {/*<h4><FormattedMessage id=\"used_techs\"/></h4>*/}\n          {/*<ul>*/}\n          {/*  <li><a href=\"https://tr.reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">ReactJS</a></li>*/}\n          {/*  <li><a href=\"https://github.com/NovelCOVID/API\" target=\"_blank\" rel=\"noopener noreferrer\">Covel Novid API</a> - <FormattedMessage id=\"data_service\"/></li>*/}\n          {/*  <li><a href=\"https://react-bootstrap.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">React Bootstrap</a> - <FormattedMessage id=\"ui_library\"/></li>*/}\n          {/*  <li><a href=\"https://github.com/react-bootstrap-table/react-bootstrap-table2\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap Table</a> - <FormattedMessage id=\"ui_library\"/></li>*/}\n          {/*  <li><a href=\"https://www.react-simple-maps.io\" target=\"_blank\" rel=\"noopener noreferrer\">React Simple Maps</a> - <FormattedMessage id=\"ui_library\"/></li>*/}\n          {/*  <li><a href=\"https://github.com/fthaksu/covidportal\" target=\"_blank\" rel=\"noopener noreferrer\">Covidst.com Github</a> - <FormattedMessage id=\"github_repo\"/></li>*/}\n          {/*</ul>*/}\n          <br/>\n\n    \t\t<div class=\"d-flex justify-content-center\">\n    \t\t    <div class=\"card profile-card-3\">\n    \t\t        <div class=\"background-block\">\n    \t\t            <img src=\"https://images.pexels.com/photos/459225/pexels-photo-459225.jpeg?auto=compress&cs=tinysrgb&h=650&w=940\" alt=\"profile-sample1\" class=\"background\"/>\n    \t\t        </div>\n    \t\t        <div class=\"profile-thumb-block\">\n    \t\t            {/*<img src={pp} alt=\"profile\" class=\"profile\"/>*/}\n    \t\t        </div>\n    \t\t        <div class=\"card-content\">\n                    <h2>Ritesh Suryavanshi<small> <FormattedMessage id=\"soft_eng\"/></small></h2>\n                    <div class=\"icon-block\">\n                        <a href=\"https://www.linkedin.com/in/ritesh-suryavanshi-98364919a/\"><i><FontAwesomeIcon icon={faLinkedinIn}/></i></a>\n                        <a href=\"https://github.com/rksury/ReactWeb-Covid.git\"><i><FontAwesomeIcon icon={faGithub}/></i></a>\n                        <a href=\"mailto:rksury@gmail.com\"><i><FontAwesomeIcon icon={faEnvelope}/></i></a>\n                    </div>\n                    </div>\n                </div>\n    \t\t</div>\n        </div>\n      </Layouts>\n    );\n}\n\nexport default memo(About);\n","import React, { useState, useEffect, memo } from 'react'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { FormattedMessage } from \"react-intl\";\nimport countryNames from \"../i18n/countrynames.json\"\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\n\n\n\nconst LatestTable = () => {\n  const [covidData, setCovidData] = useState([]); //this.state \n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => { //componentDidMount, componentDidUpdate etc..\n    const fetchData = async () => {\n      setLoading(true);\n      const result = await axios(\n        `https://corona.lmao.ninja/v2/countries`,\n      );\n      setCovidData(result.data);\n      setLoading(false);\n    };\n \n    fetchData();\n  }, []);\n\n\n  const numberFormatter = cell => {return(<span> <strong>{ cell !== undefined && cell !== null ? cell.toLocaleString() : \"\" }</strong></span>)};\n  const countryFormatter = cell  => {\n    const language = navigator.language.split(/[-_]/)[0];  \n    const iso2 = covidData.filter(item => item.country === cell).map(post => post.countryInfo.iso2) //filter map örneği\n    return(\n    <span><Link to={{ pathname: \"/country/\"+iso2[0] }}>{(language === 'tr') ? (countryNames[iso2] === '' ? {cell} : countryNames[iso2]) : cell }</Link></span>\n    )\n  };\n\n  const columns = [\n    {\n      dataField: 'country',\n      text: <FormattedMessage id=\"country\" />,\n      sort: true,\n      style: {fontWeight: 'bold'},\n      formatter: countryFormatter\n    },\n    {\n      dataField: 'cases',\n      text:  <FormattedMessage id=\"total_cases\" />,\n      sort: true,\n      formatter: numberFormatter\n    },\n    {\n      dataField: 'todayCases',\n      text:  <FormattedMessage id=\"today_cases\" />,\n      sort: true,\n      style: (cell, row, rowIndex, colIndex) => {return ((cell !== 0 && cell !== null) && { backgroundColor: '#ffc8c8'}) }, \n      formatter: (cell) => { return(<span>\n        {cell !== 0 && cell !== null ? <strong>+ { cell } </strong> : <strong>{cell}</strong>}\n      </span>) }\n    },\n    {\n      dataField: 'deaths',\n      text: <FormattedMessage id=\"total_deaths\" />,\n      sort: true,\n      formatter: numberFormatter\n    },\n    {\n      dataField: 'todayDeaths',\n      text:  <FormattedMessage id=\"today_deaths\" />,\n      sort: true,\n      style:(cell, row, rowIndex, colIndex) => {return ( (cell !== 0 && cell !== null) && { backgroundColor: '#444f5a'}) },\n      formatter: (cell) => { return(<span>\n        {cell !== 0  && cell !== null ? <strong style={ { color: 'white' } }>+ { cell } </strong> : <strong>{cell}</strong> }\n      </span>)}\n    },\n    {\n      dataField: 'recovered',\n      text: <FormattedMessage id=\"recovered\" />,\n      sort: true,\n      formatter: numberFormatter\n    },\n    {\n      dataField: 'critical',\n      text:  <FormattedMessage id=\"critical\" />,\n      sort: true,\n      formatter: numberFormatter\n    },\n    {\n      dataField: 'active',\n      text:  <FormattedMessage id=\"active\" />,\n      sort: true,\n      style: {fontWeight: 'bold'},\n      formatter: numberFormatter\n    },\n    {\n      dataField: 'casesPerOneMillion',\n      text:  <FormattedMessage id=\"cases_million\" />,\n      sort: true,\n      style: {fontWeight: 'bold'}\n    }\n  ];\n\n  const defaultSorted = [{\n    dataField: 'cases',\n    order: 'desc'\n  }];\n\n  const rowStyle = { height: 45 , justifyContent: 'center',\n  alignItems: 'center', verticalAlign: 'center'};\n\n  if (isLoading) return null; // or <Loading />\n\n  return (\n    <div className='anyClass'>\n    <BootstrapTable striped hover condensed \n     bootstrap4\n     keyField='country' \n     data={covidData} \n     columns={columns}\n     defaultSorted={defaultSorted}\n     rowStyle = {rowStyle}\n      />\n      </div>\n  )\n}\n\nexport default memo(LatestTable);","import React, { useState, useEffect, memo } from 'react'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Alert, Spinner } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\n\n\n\nconst Stats = () => {\n    const [statsData, setStatsData] = useState([]);\n    const [loading, setLoading] = useState(true)\n\n\n    async function getData() {\n\n        const res = await fetch('https://corona.lmao.ninja/v2/all');\n        const data = await res.json();\n        setStatsData(data);\n        setLoading(false);\n\n    }\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n\n    const numberFormatter = val => {\n        var number = parseInt(val);\n        return (<span>{number.toLocaleString()}</span>)\n    };\n\n    const calculateRate = (num, totalNum) => {\n        var num1 = parseInt(num);\n        var num2 = parseInt(totalNum);\n        var rate = (num1 / num2) * 100\n        return (<span>%{rate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>)\n    }\n\n    const customToDate = (val) => {\n        var num = parseFloat(val);\n        var date = new Date(num);\n        return (<span> {date.toLocaleDateString() + ' | ' + date.toLocaleTimeString()} </span>)\n    }\n\n    return (\n        <div>\n            <p>\n            </p>\n            <div className=\"card-columns\">\n                <div className=\"card text-white bg-primary mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"total_cases\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {numberFormatter(statsData.cases)}</h3>}\n                        {loading ? \"\" : <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" />:  <span className=\"font-weight-bold\"> +{numberFormatter(statsData.todayCases)}</span></p>}\n                    </div>\n                </div>\n                <div className=\"card text-white bg-success mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"recovered\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {numberFormatter(statsData.recovered)}</h3>}\n                    </div>\n                </div>\n                <div className=\"card text-white bg-dark mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"deaths\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {numberFormatter(statsData.deaths)}</h3>}\n                        {loading ?  \"\" : <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> : <span className=\"font-weight-bold\">+{numberFormatter(statsData.todayDeaths)}</span></p>}\n                    </div>\n                </div>\n                <div className=\"card text-white bg-danger mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"critical\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {numberFormatter(statsData.critical)}</h3>}\n                    </div>\n                </div>\n                <div className=\"card text-white bg-warning mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"death_rate\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {calculateRate(statsData.deaths, statsData.cases)}</h3>}\n                        {loading ? \"\" : <p className=\"card-text font-italic\"><FormattedMessage id=\"recovery_rate\" /> :<span className=\"font-weight-bold\">{calculateRate(statsData.recovered, statsData.cases)}</span></p>}\n                    </div>\n                </div>\n                <div className=\"card text-white bg-info mb-6\">\n                    <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"total_test\" /></div>\n                    <div className=\"card-body\">\n                        {loading ? (<Spinner animation=\"border\" />) :\n                            <h3 className=\"card-title\"> {numberFormatter(statsData.tests)}</h3>}\n                    </div>\n                </div>\n            </div>\n            <section className=\"my-4\">\n                <Alert variant=\"info\">\n                    <FormattedMessage id=\"last_updated\" /> :\n                {loading ? (<Spinner animation=\"grow\" size=\"sm\" />) : <strong>  {customToDate(statsData.updated)}</strong>}\n                    {/* <Link to=\"about\" className=\"alert-link\">\n                        alert link deneme\n                </Link> ---Link vermek için */}\n                </Alert>\n            </section>\n        </div>\n    )\n\n}\nexport default memo(Stats);\n","import React, { Component } from 'react'\nimport LatestTable from '../components/LatestTable'\nimport Layouts from '../components/Layouts';\nimport Stats from '../components/Stats';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <Layouts>\n                <Stats />\n                <section className=\"my-4 py-3\">\n                    <LatestTable />\n                </section>\n            </Layouts>\n        )\n    }\n}\n","import React, { memo, useEffect, useState } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    ZoomableGroup,\n    ComposableMap,\n    Geographies,\n    Geography,\n    Sphere,\n    Graticule\n} from \"react-simple-maps\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Axios from \"axios\";\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n\nconst colorScale = scaleLinear()\n    .domain([0, 100000])\n    .range([\"#E6E6E6\", \"#FF862D\"]);\n\nconst MapChart = ({ setTooltipContent }) => {\n\n    const [position, setPosition] = useState({ coordinates: [0, 0], zoom: 1 });\n    const [covidData, setCovidData] = useState([]);\n\n    async function getData() {\n        const res = await Axios('https://corona.lmao.ninja/v2/countries');\n        const data = res.data;\n        setCovidData(data);\n    }\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    function handleZoomIn() {\n        if (position.zoom >= 4) return;\n        setPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\n    }\n\n    function handleZoomOut() {\n        if (position.zoom <= 1) return;\n        if (position.zoom === 2) setPosition({ coordinates: [0, 0], zoom: 2 });\n        setPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\n    }\n\n    function handleMoveEnd(position) {\n        setPosition(position);\n    }\n    return (\n        <>\n            <Row className=\"map-first-row\">\n                <Col>\n                    <div className=\"controls\">\n                        <button onClick={handleZoomIn}>\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                width=\"24\"\n                                height=\"24\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"3\"\n                            >\n                                <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n                                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n                            </svg>\n                        </button>\n                        <button onClick={handleZoomOut}>\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                width=\"24\"\n                                height=\"24\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"3\"\n                            >\n                                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n                            </svg>\n                        </button>\n                    </div>\n                </Col>\n                <Col>\n                    <div>\n                    <div class=\"color-bar-map\"><span className=\"pull-left\">MIN</span><span className=\"float-right\">MAX</span></div><div className=\"color-bar-text\"></div>\n                    </div>\n                </Col>\n            </Row>\n            <div className=\"map-sec-row\">\n                <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }} width={1100}>\n                    <ZoomableGroup zoom={position.zoom}\n                        center={position.coordinates}\n                        onMoveEnd={handleMoveEnd}>\n                        <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                        <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                        {covidData.length > 0 && (\n                            <Geographies geography={geoUrl}>\n                                {({ geographies }) =>\n                                    geographies.map(geo => { //filter map örneği\n                                        const d = covidData.find(s => s.countryInfo.iso3 === geo.properties.ISO_A3);\n                                        return (\n                                            <Geography\n                                                key={geo.rsmKey}\n                                                geography={geo}\n                                                fill={d ? colorScale(d[\"cases\"]) : \"#F5F4F6\"}\n                                                onMouseEnter={() => {\n                                                    const { NAME } = geo.properties;\n                                                    setTooltipContent((d === undefined ? '' : (<div>\n                                                        <strong>{NAME}</strong><br />\n                                                        <FormattedMessage id=\"total_cases\" />: {d[\"cases\"].toLocaleString()} <br />\n                                                        <FormattedMessage id=\"deaths\" /> : {d[\"deaths\"].toLocaleString()}<br />\n                                                        <FormattedMessage id=\"today_cases\" /> : {+ d[\"todayCases\"].toLocaleString()}<br />\n                                                    </div>)\n                                                    ));\n                                                }}\n                                                onMouseLeave={() => {\n                                                    setTooltipContent(\"\");\n                                                }}\n                                                style={{\n                                                    hover: {\n                                                        fill: \"#FFE700\",\n                                                        outline: \"none\"\n                                                    },\n                                                    pressed: {\n                                                        fill: \"#E42\",\n                                                        outline: \"none\"\n                                                    }\n                                                }}\n                                            />)\n                                    }\n                                    )\n                                }\n                            </Geographies>\n                        )}\n                    </ZoomableGroup>\n                </ComposableMap>\n            </div>\n        </>\n    );\n};\n\nexport default memo(MapChart);\n","import React, { useState,  memo} from 'react'\nimport Layouts from '../components/Layouts';\nimport MapChart from '../components/MapChart';\nimport ReactTooltip from \"react-tooltip\";\nimport { FormattedMessage } from 'react-intl';\n\n\n\nconst Maps = () => {\n    const [content, setContent] = useState(<div></div>);\n\n    return (\n        <Layouts>\n            <div>\n                <MapChart setTooltipContent={setContent} />\n                <ReactTooltip place=\"top\" >{content}</ReactTooltip>\n            </div>\n            <div className=\"phone-area\">\n            <div className=\"phone\"></div>\n            <div className=\"map-message2\">\n                <FormattedMessage id=\"phone_warning_top\"/>\n            </div>\n            <div className=\"map-message\">\n               <FormattedMessage id=\"phone_warning\"/>\n            </div>\n            </div>\n        </Layouts>\n    )\n}\n\nexport default memo(Maps);","import React, { PureComponent } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  Line,\n  LineChart,\n  Legend\n} from \"recharts\";\n\n\nclass Graph extends PureComponent {\n  render() {\n    return (\n      Array.isArray(this.props.weekData) && (\n        <div style={{ height: 300 }}>\n          <ResponsiveContainer>\n            <AreaChart\n              data={this.props.weekData}\n              margin={{\n                top: 10,\n                right: 30,\n                left: 0,\n                bottom: 0\n              }}\n            >\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey={this.props.XAxisDatakey} />\n              <YAxis />\n              <Tooltip />\n              <Area\n                name={this.props.name}\n                strokeWidth={2}\n                type='monotone'\n                dataKey={this.props.AreaDataKey}\n                stroke='#2768e9'\n                fill={this.props.fill}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      )\n    );\n  }\n}\n\nclass LineGraph extends PureComponent { \n  render(){\n    return(\n      Array.isArray(this.props.weekData) && (\n      <div style={{ height: 400 }}>\n        <ResponsiveContainer>\n          <LineChart width={600} height={300} data={this.props.weekData}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis dataKey={this.props.XAxisDatakey} />\n            <YAxis type=\"number\" domain={[0, 'dataMax']}  />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey={this.props.Key1} name={this.props.Name1} stroke=\"#c81912\" fill=\"#c81912\" strokeWidth={2.5} />\n            <Line type=\"monotone\" dataKey={this.props.Key2} name={this.props.Name2} stroke=\"#2768e9\" fill=\"#2768e9\" strokeWidth={2.5} />\n            <Line type=\"monotone\" dataKey={this.props.Key3} name={this.props.Name3} stroke=\"#6c757d\"  fill=\"#6c757d\" strokeWidth={2.5}/>\n            <Line type=\"monotone\" dataKey={this.props.Key4} name={this.props.Name4} stroke=\"#28a745\"  fill=\"#28a745\" strokeWidth={2.5}/>\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      )\n    )\n  }\n}\n\nclass CompareLineGraph extends PureComponent { \n  render(){\n    return(\n      Array.isArray(this.props.data) && (\n      <div style={{ height: 400 }}>\n        <ResponsiveContainer>\n          <LineChart width={600} height={300} data={this.props.data}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <XAxis dataKey={this.props.XAxisDatakey} />\n            <YAxis type=\"number\" domain={[0, 'dataMax']}  />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Legend />\n            <CustomizedDot/>\n            <Line type=\"monotone\" dot={<CustomizedDot color=\"#c81912\"/>} dataKey={this.props.Key1} name={this.props.Name1} \n            stroke=\"#c81912\" fill=\"#c81912\" strokeWidth={2.5} />\n            <Line type=\"monotone\" dot={<CustomizedDot color=\"#2768e9\"/>} dataKey={this.props.Key2} name={this.props.Name2} \n            stroke=\"#2768e9\" fill=\"#2768e9\" strokeWidth={2.5} />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      )\n    )\n  }\n}\n\nclass CustomizedDot extends React.Component {\n  render() {\n      const { cx, cy } = this.props;\n      return (\n          <circle cx={cx} cy={cy} r={2} stroke={this.props.color} strokeWidth={1} fill={this.props.color} />\n      );\n  }\n};\n\nexport {Graph, LineGraph, CompareLineGraph};","import React, { memo, useState, useEffect } from 'react'\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport {Form, FormGroup,FormLabel, FormControl, option } from \"react-bootstrap\";\nimport countryNames from '../i18n/countrynames.json'\nimport countryNamesEN from '../i18n/countrynamesEN.json'\n\n\n\n const CountryCard = (props) => {\n    const [country, setCountry] = useState(props.selectedCountry);\n    let language = navigator.language.split(/[-_]/)[0]; \n    const navLang =  (language === 'tr') ? language : 'en' ; \n    let selectedCountryNames = (navLang === \"tr\" ? countryNames : countryNamesEN)\n\n    const intl = useIntl();\n\n    useEffect(() => {\n      setCountry(props.selectedCountry);\n    }, [props.selectedCountry])\n\n  \n    const handleChange = (event) => {\n        props.handler(event.target.value); //Country.js'deki updateCountry'i tetikler.\n        setCountry(event.target.value);\n      };\n    \n      return (\n        <div className=\"country-form\">\n          <Form>\n            <FormGroup>\n              <FormLabel><FormattedMessage id=\"select_country\" /></FormLabel>\n              <FormControl className=\"mobile-selector\"\n                as='select'\n                name='country'\n                placeholder='Select..'\n                onChange={handleChange}\n                value={country}\n              >\n               <option hidden >{intl.formatMessage({ id: \"select\" })}</option>\n              { \n                Object.keys(selectedCountryNames).sort((a,b) => selectedCountryNames[a].localeCompare(selectedCountryNames[b])).map((key,index) => \n                <option key={index} value={key}>{selectedCountryNames[key]}</option>\n               )}\n              </FormControl>\n            </FormGroup>\n          </Form>\n        </div>\n      );\n\n }\n\nexport default memo(CountryCard);\n","import axios from 'axios';\nimport moment from 'moment';\n\n\nconst getTurkeyData = async () => {\n    const result = await axios(`https://raw.githubusercontent.com/ozanerturk/covid19-turkey-api/master/dataset/timeline.json`);\n    let turkeyData = result.data;\n\n    let tasks = Object.values(turkeyData); //JSONObject to JSONArray. Object.values -> get an object values.\n    tasks = tasks.map((item) => {\n        var res = item.date.split(\"/\");\n        item.date = res[1] + \"-\" + res[0] + \"-\" + res[2];\n        //item.Date = moment(item.date).format(\"MMM Do\");\n        item.Date = (res[0] + turkishMotnhFormatter(res[1]));\n\n        //Datas all are string, must convert numbers\n        item.Confirmed = Number.parseInt(item.totalCases);\n        item.Recovered = Number.parseInt(item.totalRecovered);\n        item.Deaths = Number.parseInt(item.totalDeaths);\n        item.dailyConfirmed = Number.parseInt(item.cases);\n        item.test = Number.parseInt(item.tests);\n        item.testCaseRate = calculateRate(Number.parseInt(item.cases), Number.parseInt(item.tests));\n        item.caseDeathRate = calculateRate(Number.parseInt(item.totalDeaths), Number.parseInt(item.totalCases));\n        item.totalIntubated = Number.parseInt(item.totalIntubated);\n        item.totalIntensiveCare = Number.parseInt(item.totalIntensiveCare);\n\n        return item;\n    });\n\n    return tasks;\n};\n\n\nconst getTurkeyStatsData = async () => {\n    const result = await axios(`https://raw.githubusercontent.com/ozanerturk/covid19-turkey-api/master/dataset/timeline.json`);\n    let turkeyData = result.data;\n    let yesterDayCritical = 0;\n    let tasks = Object.values(turkeyData); //JSONObject to JSONArray. Object.values -> get an object values.\n    tasks = tasks.map((item, index, arr) => {\n        var res = item.date.split(\"/\");\n        index > 0 ? yesterDayCritical = arr[index - 1].totalIntensiveCare : yesterDayCritical = 0;\n        item.date = res[1] + \"-\" + res[0] + \"-\" + res[2];\n        //item.Date = moment(item.date).format(\"MMM Do\");\n        item.Date = (res[0] + turkishMotnhFormatter(res[1]));\n\n        //Datas all are string, must convert numbers\n        item.testCaseRate = calculateRate(Number.parseInt(item.cases), Number.parseInt(item.tests));\n        item.todayRecovered = Number.parseInt(item.recovered);\n        item.todayDeaths = Number.parseInt(item.deaths);\n        item.todayCases = Number.parseInt(item.cases);\n        item.todayTests = Number.parseInt(item.tests);\n        item.todayCritical = Number.parseInt(item.totalIntensiveCare - yesterDayCritical);\n        item.cases = Number.parseInt(item.totalCases);\n        item.recovered = Number.parseInt(item.totalRecovered);\n        item.deaths = Number.parseInt(item.totalDeaths);\n        item.dailyConfirmed = Number.parseInt(item.cases);\n        item.tests = Number.parseInt(item.totalTests);\n        item.caseDeathRate = calculateRate(Number.parseInt(item.totalDeaths), Number.parseInt(item.totalCases));\n        item.totalIntubated = Number.parseInt(item.totalIntubated);\n        item.critical = Number.parseInt(item.totalIntensiveCare);\n\n\n        return item;\n    });\n\n    return tasks[tasks.length - 1];\n};\n\n\nconst getWorldData = async (country) => {\n    let usRecoveryArr;\n\n    if (!country) {\n        return [];\n    }\n    const result = await axios(`https://api.covid19api.com/total/dayone/country/${country}`);\n\n    if (country ===  \"US\") { //US does not share recovery data to JH, the data is getting available source\n        let usResult = await axios('https://corona.lmao.ninja/v2/historical/US?lastdays=100');\n        let usResultData = usResult.data;\n        usRecoveryArr = Object.values(usResultData.timeline.recovered);\n    }\n    \n    let worldData = result.data;\n    worldData = worldData.map((item, index, arr) => {\n        if (country ===  \"US\" && usRecoveryArr) {\n            item.Recovered = usRecoveryArr[index + 1];\n        }\n        item.Date = moment(item.Date).format(\"MMM Do\");\n        item.caseDeathRate = calculateRate(Number.parseInt(item.Deaths), Number.parseInt(item.Confirmed));\n        item.recoveryRate = calculateRate(Number.parseInt(item.Recovered), Number.parseInt(item.Confirmed));\n\n        if (index > 0) {\n            if(item.Recovered === 0){\n                    item.Recovered =  arr[index - 1].Recovered;\n            }\n            if(item.Deaths === 0){\n                item.Deaths = arr[index - 1].Deaths;\n            }\n            if(item.Confirmed === 0){\n                item.Confirmed = arr[index - 1].Confirmed;\n            }\n\n            item.dailyConfirmed = item.Confirmed - arr[index - 1].Confirmed;\n            item.deaths = item.Deaths - arr[index - 1].Deaths;\n            item.recovered = item.Recovered - arr[index - 1].Recovered;\n        }\n\n        return item;\n    });\n    return worldData;\n};\n\n\nconst getCompareData = async (country1, country2) => {\n    if (!country1 && !country2) {\n        return [];\n    }\n    const result = await axios(`https://corona.lmao.ninja/v2/countries/${country1},${country2}`);\n    let compareData = result.data;\n    return compareData;\n};\n\nconst getHistoricalData = async (country1, country2) => {\n    if (!country1 && !country2) {\n        return [];\n    }\n    const result = await axios(`https://corona.lmao.ninja/v2/historical/${country1},${country2}?lastdays=all`);\n    let historyData = result.data;\n    let activeGraphArray = [];\n    let deathGraphArray = [];\n    let recoveredGraphArray = [];\n    let activeArray = [];\n    let recoveryArray = [];\n    let deathArray = [];\n\n    historyData.forEach( (item, index) => {\n        activeGraphArray.push(item.timeline.cases)\n    } )\n\n    historyData.forEach( (item, index) => {\n        deathGraphArray.push(item.timeline.deaths)\n    } )\n\n    historyData.forEach( (item, index) => {\n        recoveredGraphArray.push(item.timeline.recovered)\n    } )\n\n    let graphArray1 = activeGraphArray[0];\n    let graphArray2 = activeGraphArray[1];\n\n    Object.entries(graphArray1).forEach(  ([key,value]) => {\n        var res = key.split(\"/\");\n        var date = res[1] + \".\" + res[0] + \".\" + res[2];\n        activeArray.push({ \"date\":date, \"country1\" : value, \"country2\": graphArray2[key] !== undefined ? graphArray2[key] :0 })\n    })\n\n    graphArray1 = deathGraphArray[0];\n    graphArray2 = deathGraphArray[1];\n\n    Object.entries(graphArray1).forEach(  ([key,value]) => {\n        var res = key.split(\"/\");\n        var date = res[1] + \".\" + res[0] + \".\" + res[2];\n        deathArray.push({ \"date\":date, \"country1\" : value, \"country2\": graphArray2[key] !== undefined ? graphArray2[key] :0 })\n    })\n\n\n    graphArray1 = recoveredGraphArray[0];\n    graphArray2 = recoveredGraphArray[1];\n\n    Object.entries(graphArray1).forEach(  ([key,value]) => {\n        var res = key.split(\"/\");\n        var date = res[1] + \".\" + res[0] + \".\" + res[2];\n        recoveryArray.push({ \"date\":date, \"country1\" : value, \"country2\": graphArray2[key] !== undefined ? graphArray2[key] :0 })\n    })\n    \n    return {activeArray, deathArray, recoveryArray};\n};\n\n\nconst calculateRate = (num, totalNum) => {\n    if (totalNum ===  0) {\n        return 0;\n    }\n    var num1 = parseInt(num);\n    var num2 = parseInt(totalNum);\n    var rate = (num1 / num2) * 100\n    return (Math.round(rate * 1e2) / 1e2)\n}\n\nconst turkishMotnhFormatter = (month) => {\n    var monthname;\n    switch (month) {\n        case \"01\":\n            monthname = \" Oca\";\n            break;\n        case \"02\":\n            monthname = \" Şub\";\n            break;\n        case \"03\":\n            monthname = \" Mar\";\n            break;\n        case \"04\":\n            monthname = \" Nis\";\n            break;\n        case \"05\":\n            monthname = \" May\";\n            break;\n        case \"06\":\n            monthname = \" Haz\";\n            break;\n        case \"07\":\n            monthname = \" Tem\";\n            break;\n        case \"08\":\n            monthname = \" Ağu\";\n            break;\n        case \"09\":\n            monthname = \" Eyl\";\n            break;\n        case '10':\n            monthname = ' Eki';\n            break;\n        case '11':\n            monthname = ' Kas';\n            break;\n        case '12':\n            monthname = ' Ara';\n            break;\n        default:\n            monthname = ' Oca';\n            break;\n    }\n    return monthname;\n}\n\n\nexport { getTurkeyData, getWorldData, getTurkeyStatsData, getCompareData, getHistoricalData };\n","import React, { useState, useEffect, memo } from 'react'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { Spinner, Row } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\nimport { getTurkeyStatsData } from \"../api/service\"\nimport axios from \"axios\";\nimport { getTurkeyData, getWorldData } from \"../api/service\" \n\n\n\nconst CountryStats = (props) => {\n    const [statsData, setStatsData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n\n\n    async function getData() {\n        if (props.country === \"TR\") {\n            let data = await getTurkeyStatsData();\n            setStatsData(data);\n            setLoading(false);\n        } else {\n            const res = await axios(`https://corona.lmao.ninja/v2/countries/${props.country}`);\n            const data = res.data;\n            setStatsData(data);\n            setLoading(false);\n        }\n\n    }\n\n    useEffect(() => {\n        setLoading(true);\n        getData();\n    }, [props.country]); //if use props and props change useEffect triggered. must use props.country for just one trigger\n\n\n\n    const numberFormatter = val => {\n        var number = parseInt(val);\n        return (<span>{number.toLocaleString()}</span>)\n    };\n\n    const calculateRate = (num, totalNum) => {\n        var num1 = parseInt(num);\n        var num2 = parseInt(totalNum);\n        if (num1 === 0 || num2 === 0) {\n            return (<span>0</span>);\n        }\n        var rate = (num1 / num2) * 100\n        return (<span>%{rate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>)\n    }\n\n    return (\n        <div>\n            <p>\n            </p>\n\n            <div className=\"card-deck\">\n                <Row>\n                    <div className=\"card bg-primary\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"total_cases\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {numberFormatter(statsData.cases)}</h3>}\n                            {(!loading) ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> :\n                            <span className=\"font-weight-bold\">{numberFormatter(statsData.todayCases)}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"card bg-danger\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"deaths\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {numberFormatter(statsData.deaths)}</h3>}\n                            {(!loading) ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> :\n                            <span className=\"font-weight-bold\">{numberFormatter(statsData.todayDeaths)}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"card bg-warning\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"critical\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {numberFormatter(statsData.critical)}</h3>}\n                            {(props.country === \"TR\" && !loading) ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> :\n                            <span className=\"font-weight-bold\">{numberFormatter(statsData.todayCritical)}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"card bg-success\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"recovered\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {numberFormatter(statsData.recovered)}</h3>}\n                            {(props.country === \"TR\" && !loading) ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> :\n                             <span className=\"font-weight-bold\">{numberFormatter(statsData.todayRecovered)}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                </Row>\n                <br />\n                <Row>\n                    <div className=\"card bg-secondary\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"total_test\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {numberFormatter(statsData.tests)}</h3>}\n                            {(props.country === \"TR\" && !loading) ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> : <span className=\"font-weight-bold\">{numberFormatter(statsData.todayTests)}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"card bg-info\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"case_test\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\"> {calculateRate(statsData.cases, statsData.tests)}</h3>}\n                            {props.country === \"TR\" && !loading ? <p className=\"card-text font-italic\"><FormattedMessage id=\"today\" /> : <span className=\"font-weight-bold\">%{statsData.testCaseRate}</span> </p> : \"\"}\n                        </div>\n                    </div>\n                    <div className=\"card bg-dark\">\n                        <div className=\"card-header font-weight-bold text-uppercase\"><FormattedMessage id=\"death_rate\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title\">  {calculateRate(statsData.deaths, statsData.cases)}</h3>}\n                        </div>\n                    </div>\n                    <div className=\"card bg-lighter\">\n                        <div className=\"card-header font-weight-bold text-uppercase text-dark\"><FormattedMessage id=\"recovery_rate2\" /></div>\n                        <div className=\"card-body\">\n                            {loading ? (<Spinner animation=\"border\" />) :\n                                <h3 className=\"card-title text-dark\"> {calculateRate(statsData.recovered, statsData.cases)}</h3>}\n                        </div>\n                    </div>\n                </Row>\n            </div>\n            <section className=\"my-4 align-left\">\n\n            </section>\n            <br></br>\n        </div>\n    )\n\n}\nexport default memo(CountryStats);\n","import React, { useState, useEffect, memo } from \"react\";\nimport {Graph, LineGraph} from \"../components/Graph\";\nimport CountryCard from \"../components/CountryCard\";\nimport CountryStats from \"../components/CountryStats\"\nimport { Container, Row, Col, Button, Spinner } from \"react-bootstrap\";\nimport { useIntl, FormattedMessage } from \"react-intl\";\nimport Layouts from \"../components/Layouts\";\nimport { getTurkeyData, getWorldData } from \"../api/service\"\n\nconst Country = (props) => {\n  const [graphData, setGraphData] = useState({});\n  const [country, setCountry] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [statsCountry, setStatsCountry] = useState(\"\");\n\n  const intl = useIntl();\n\n  const getData = async () => {\n    setLoading(true);\n    if (country === \"TR\") {\n      let data = await getTurkeyData(); //from api, async-await\n      setGraphData(data);\n      setLoading(false);\n    }\n    else {\n      let countryData = await getWorldData(country);\n      setGraphData(countryData);\n      setLoading(false);\n    }\n\n  };\n\n  useEffect(() => {\n    //URL ile gelen parametre (props.match.params.id) değişir ise tetiklenecek.\n    setLoading(true);\n    setCountry(props.match.params.id); //hem country değişkenini kullanan componentlerin\n    setStatsCountry(props.match.params.id); //hem de statsCountry değişkenini kullanan CountryStats componentinin tetiklenmesi için.\n  }, [props.match.params.id])\n\n\n  useEffect(() => {\n    setLoading(true); //country'i kullanan yerlerin tetiklenmesi için\n    getData();\n  }, [country]);\n\n\n  function updateCountry(updatedCountry) {\n    setLoading(true);\n    setCountry(updatedCountry);\n    setStatsCountry(updatedCountry); //statsCountry'i update etmez isek CountryStats tetiklenmiyor.\n  }\n\n\n  return (\n    <Layouts>\n      <div>\n        <Container className=\"country-container\">\n          <div className=\"customcenter\">\n            <CountryCard selectedCountry={country} handler={updateCountry} />\n          </div>\n          <Row>\n            {statsCountry !== \"\" ? <CountryStats country={statsCountry} /> : \"Loading\"} {/*kontrol yapılmaz ise en başta boş gidip hataya sebep olabiliyor.*/}\n          </Row>\n          <Row>\n            <Col>\n            <h4><FormattedMessage id=\"general_stats\"/>{!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)}</h4>\n            <LineGraph \n              weekData={graphData}\n              XAxisDatakey={\"Date\"}\n              Key1={\"deaths\"}\n              Key2={\"dailyConfirmed\"}\n              Key3={\"test\"}\n              Key4={\"recovered\"}\n              Name1={intl.formatMessage({ id: \"deaths\" })}\n              Name2={intl.formatMessage({ id: \"logarithmic_cases\" })}\n              Name3={intl.formatMessage({ id: \"test\" })}\n              Name4={intl.formatMessage({ id: \"recovered\" })}\n              />\n            </Col>\n          </Row>\n          <br/>\n          <Row>\n            <Col>\n              <div className=\"graph\">\n                <h4><FormattedMessage id=\"total_cases\" /> {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                <Graph\n                  weekData={graphData}\n                  XAxisDatakey={\"Date\"}\n                  AreaDataKey={\"Confirmed\"}\n                  fill={\"#84ACEC\"}\n                  name={intl.formatMessage({ id: \"total_cases\" })}\n                />\n              </div>\n            </Col>\n            <Col>\n              <div className=\"graph\">\n                <h4><FormattedMessage id=\"logarithmic_cases\" /> {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                <Graph\n                  weekData={graphData}\n                  XAxisDatakey={\"Date\"}\n                  AreaDataKey={\"dailyConfirmed\"}\n                  fill={\"#8A80D7\"}\n                  name={intl.formatMessage({ id: \"logarithmic_cases\" })}\n                />\n              </div>\n\n            </Col>\n          </Row>\n          <br />\n          <br />\n          <Row>\n            <Col>\n              <div className=\"graph\">\n                <h4><FormattedMessage id=\"deaths\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                <Graph\n                  weekData={graphData}\n                  XAxisDatakey={\"Date\"}\n                  AreaDataKey={\"Deaths\"}\n                  fill={\"#c81912\"}\n                  name={intl.formatMessage({ id: \"deaths\" })}\n                />\n              </div>\n            </Col>\n            <Col>\n              <div className=\"graph\">\n                <h4><FormattedMessage id=\"recovered\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                <Graph\n                  weekData={graphData}\n                  XAxisDatakey={\"Date\"}\n                  AreaDataKey={\"Recovered\"}\n                  fill={\"#26e760\"}\n                  name={intl.formatMessage({ id: \"recovered\" })}\n                />\n              </div>\n\n            </Col>\n          </Row>\n          <br />\n          <br />\n          {country === \"TR\" ? (\n            <Row>\n              <Col>\n                <div className=\"graph\">\n                  <h4><FormattedMessage id=\"intubated\" /> {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                  <Graph\n                    weekData={graphData}\n                    XAxisDatakey={\"Date\"}\n                    AreaDataKey={\"totalIntubated\"}\n                    fill={\"#FD72FB\"}\n                    name={intl.formatMessage({ id: \"intubated\" })}\n                  />\n                </div>\n              </Col>\n              <Col>\n                <div className=\"graph\">\n                  <h4><FormattedMessage id=\"intensive_care\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                  <Graph\n                    weekData={graphData}\n                    XAxisDatakey={\"Date\"}\n                    AreaDataKey={\"totalIntensiveCare\"}\n                    fill={\"#FDC272\"}\n                    name={intl.formatMessage({ id: \"intensive_care\" })}\n                  />\n                </div>\n\n              </Col>\n            </Row>\n          ) : \"\"}\n          <br />\n          <br />\n          {country === \"TR\" ? (\n            <Row>\n              <Col>\n                <div className=\"graph\">\n                  <h4><FormattedMessage id=\"case_test_rate\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                  <Graph\n                    weekData={graphData}\n                    XAxisDatakey={\"Date\"}\n                    AreaDataKey={\"testCaseRate\"}\n                    fill={\"#b0a160\"}\n                    name={intl.formatMessage({ id: \"case_test_rate\" })}\n                  />\n                </div>\n              </Col>\n              <Col>\n                <div className=\"graph\">\n                  <h4><FormattedMessage id=\"death_case_rate\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                  <Graph\n                    weekData={graphData}\n                    XAxisDatakey={\"Date\"}\n                    AreaDataKey={\"caseDeathRate\"}\n                    fill={\"#9A4CA7\"}\n                    name={intl.formatMessage({ id: \"death_case_rate\" })}\n                  />\n                </div>\n              </Col>\n            </Row>) : (\n              <Row>\n                <Col>\n                  <div className=\"graph\">\n                    <h4><FormattedMessage id=\"recovery_rate2\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                    <Graph\n                      weekData={graphData}\n                      XAxisDatakey={\"Date\"}\n                      AreaDataKey={\"recoveryRate\"}\n                      fill={\"#4CA6A7\"}\n                      name={intl.formatMessage({ id: \"recovery_rate2\" })}\n                    />\n                  </div>\n                </Col>\n                <Col>\n                  <div className=\"graph\">\n                    <h4><FormattedMessage id=\"death_case_rate\" />  {!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)} </h4>\n                    <Graph\n                      weekData={graphData}\n                      XAxisDatakey={\"Date\"}\n                      AreaDataKey={\"caseDeathRate\"}\n                      fill={\"#9A4CA7\"}\n                      name={intl.formatMessage({ id: \"death_case_rate\" })}\n                    />\n                  </div>\n                </Col>\n              </Row>\n            )}\n        </Container>\n      </div>\n    </Layouts>\n  );\n}\n\nexport default memo(Country);","import React, {  memo } from 'react';\nimport Layouts from '../components/Layouts';\nimport { FormattedMessage } from \"react-intl\";\n\n\n\n\nconst Forecast = () => {\n  return (\n    <Layouts>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\"><FormattedMessage id=\"forecast\" /></h1>\n        <p className=\"lead\">\n          <FormattedMessage id=\"forecast_message1\" />\n          <br/>\n          <br/>\n          <FormattedMessage\n            id=\"forecast_list\"\n            defaultMessage=\"<ul><li>item1</li><li>item2</li></ul>\"\n            values={{\n              ul: (...msg) => <ul>{msg}</ul>,\n              li: (...msg) => <li>{msg}</li>,\n            }} />\n          <FormattedMessage id=\"forecast_message2\" /></p>\n        <br></br>\n\n      </div>\n    </Layouts>\n  );\n}\n\nexport default memo(Forecast);\n","import React, { useState, useEffect, memo } from 'react'\nimport Layouts from '../components/Layouts';\nimport CountryCard from '../components/CountryCard';\nimport { Row, Col, Container, Table, Spinner, Button, Card } from 'react-bootstrap';\nimport { getCompareData, getHistoricalData } from '../api/service'\nimport { FormattedMessage } from 'react-intl';\nimport { CompareLineGraph } from '../components/Graph';\nimport countryNames from \"../i18n/countrynames.json\";\nimport countryNamesEN from \"../i18n/countrynamesEN.json\";\nimport {\n    WhatsappShareButton,\n    WhatsappIcon,\n    FacebookIcon,\n    FacebookShareButton,\n    TwitterShareButton,\n    TwitterIcon,\n    LinkedinShareButton,\n    LinkedinIcon\n  } from \"react-share\";\n\n\nconst Compare = (props) => {\n    const [firstCountry, setFirstCountry] = useState(\"TR\");\n    const [secondCountry, setSecondCountry] = useState(\"IT\");\n    const [loading, setLoading] = useState(true);\n    const [data, setData] = useState([]);\n    const [activeData, setActiveData] = useState([]);\n    const [deathData, setDeathData] = useState([]);\n    const [recoveryData, setRecoveryData] = useState([]);\n\n    const language = navigator.language.split(/[-_]/)[0];  \n\n\n    const getData = async () => {\n        setLoading(true);\n        let cmpData = await getCompareData(firstCountry,secondCountry);\n        setData(cmpData);\n        setLoading(false);\n        getGraphData();\n    };\n\n    const getGraphData = async () => {\n        setLoading(true);\n        let {activeArray, deathArray, recoveryArray} = await getHistoricalData(firstCountry,secondCountry); //multiple array returns\n        setActiveData(activeArray);\n        setDeathData(deathArray);\n        setRecoveryData(recoveryArray);\n        setLoading(false);\n    };\n\n\n    function updateFirstCountry(updatedCountry) {\n        setFirstCountry(updatedCountry);\n        props.history.push(\"/compare/\" + (updatedCountry+\"_\"+secondCountry).toString());\n    }\n\n    function updateSecondCountry(updatedCountry) {\n        setSecondCountry(updatedCountry);\n        props.history.push(\"/compare/\" + (firstCountry+\"_\"+updatedCountry).toString());\n\n    }\n\n    useEffect(() => {\n        getData();\n    }, [firstCountry, secondCountry])\n\n    useEffect(() => {\n        //URL ile gelen parametre (props.match.params.id) değişir ise tetiklenecek.\n        setLoading(true);\n        if (props.match.params.id !== \"\" && props.match.params.id !== undefined) {\n            var array = props.match.params.id.split('_')\n            setFirstCountry(array[0]);\n            setSecondCountry(array[1]);\n        }\n    }, [props.match.params.id])\n\n    const calculateRate = (num, totalNum) => {\n        var num1 = parseInt(num);\n        var num2 = parseInt(totalNum);\n        if (num1 === 0 || num2 === 0) {\n            return (<span>0</span>);\n        }\n        var rate = (num1 / num2) * 100\n        return (<span>%{rate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>)\n    }\n\n\n    return (\n        <Layouts>\n            <Container className=\"country-container\">\n                <Row>\n                    <Col>\n                        <CountryCard selectedCountry={firstCountry} handler={updateFirstCountry} />\n                    </Col>\n                    <Col>\n                        <CountryCard selectedCountry={secondCountry} handler={updateSecondCountry} />\n                    </Col>\n                </Row>\n            </Container>\n            <Table bordered hover className=\"compare-table\">\n                <thead className=\"text-center\">\n                    <tr>\n                        <th>#</th>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      <img alt=\"flag\" src={item.countryInfo.flag} width=\"125\" />\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                </thead>\n                <tbody className=\"text-center\">\n                    <tr>\n                        <td><FormattedMessage id=\"test\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                     {item.tests.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"total_cases\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                     {item.cases.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"active\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.active.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"critical\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.critical.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"deaths\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.deaths.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"recovered\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.recovered.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"test_million\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.testsPerOneMillion.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"death_rate\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                            {calculateRate(item.deaths, item.cases)}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"today_cases\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th className=\"text-center\" key={item.country}>\n                                     {item.todayCases.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                    <tr>\n                        <td><FormattedMessage id=\"today_deaths\"/></td>\n                        {data !== [] && !loading ? data.map((item) => { \n                            return <th key={item.country}>\n                                      {item.todayDeaths.toLocaleString()}\n                                    </th> }) : <><th><Spinner animation=\"border\" /></th><th><Spinner animation=\"border\" /></th></>\n                            }\n                    </tr>\n                </tbody>\n            </Table>\n            <div className=\"social-share\">\n                <Card style={{width: \"250px\", margin: \"0\" }}>\n                    <Card.Header><FormattedMessage id=\"share\"/></Card.Header>\n                    <Card.Body>\n                        <WhatsappShareButton url={window.location.href}><WhatsappIcon size={50} round /></WhatsappShareButton>\n                        <FacebookShareButton url={window.location.href}><FacebookIcon size={50} round /></FacebookShareButton>\n                        <TwitterShareButton url={window.location.href}><TwitterIcon size={50} round /></TwitterShareButton>\n                        <LinkedinShareButton url={window.location.href}><LinkedinIcon size={50} round /></LinkedinShareButton>\n                    </Card.Body>\n                </Card>\n            </div>\n            <br/>\n            <br/>\n            <Container className=\"country-container\">\n                <Row>\n                    <Col>\n                    <h4><FormattedMessage id=\"logarithmic_cases\"/>{!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)}</h4>\n                    <CompareLineGraph \n                        data={activeData}\n                        XAxisDatakey={\"date\"}\n                        Key1={\"country1\"}\n                        Key2={\"country2\"}\n                        Name1={language === \"tr\" ? countryNames[firstCountry] : countryNamesEN[firstCountry]}\n                        Name2={language === \"tr\" ? countryNames[secondCountry] : countryNamesEN[secondCountry]}\n                        />\n                    </Col>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                    <h4><FormattedMessage id=\"deaths\"/>{!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)}</h4>\n                    <CompareLineGraph \n                        data={deathData}\n                        XAxisDatakey={\"date\"}\n                        Key1={\"country1\"}\n                        Key2={\"country2\"}\n                        Name1={language === \"tr\" ? countryNames[firstCountry] : countryNamesEN[firstCountry]}\n                        Name2={language === \"tr\" ? countryNames[secondCountry] : countryNamesEN[secondCountry]}\n                        />\n                    </Col>\n                </Row>\n                <br/>\n                <Row>\n                <Col>\n                <h4><FormattedMessage id=\"recovered\"/>{!loading ? '' : (<Button variant=\"primary\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> <FormattedMessage id=\"loading\" /> </Button>)}</h4>\n                    <CompareLineGraph \n                        data={recoveryData}\n                        XAxisDatakey={\"date\"}\n                        Key1={\"country1\"}\n                        Key2={\"country2\"}\n                        Name1={language === \"tr\" ? countryNames[firstCountry] : countryNamesEN[firstCountry]}\n                        Name2={language === \"tr\" ? countryNames[secondCountry] : countryNamesEN[secondCountry]}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </Layouts>\n    )\n}\n\nexport default memo(Compare);","import React ,{ memo } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport About from './pages/About.js';\nimport Home from './pages/Home.js'; \nimport Maps from \"./pages/Maps.js\";\nimport Country from \"./pages/Country.js\";\nimport Forecast from \"./pages/Forecast\"\nimport Compare from \"./pages/Compare.js\";\nimport \"./App.css\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/maps\" component={Maps} />\n          <Route exact path=\"/country/:id\" component={Country} />\n          <Route exact path=\"/about\" component={About}/>\n          <Route exact path=\"/forecast\" component={Forecast}/>\n          <Route exact path=\"/compare/:id\" component={Compare}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from \"react-intl\";\nimport messages from './i18n/messages.json';\n\nconst language = navigator.language.split(/[-_]/)[0];  // language without region code\nconst navLang =  (language === 'tr') ? language : 'en' ; \n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider locale={navLang} messages={messages[navLang]}>\n      <App />\n    </IntlProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}